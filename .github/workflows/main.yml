name: Build Docker Image

on:
  push:
    tags: ['*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: aztube-backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build and test project with Maven
      run: mvn clean install

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}

    - name: Login to Github Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy Image
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read

    steps:
      - name: Deploy Docker Image to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || '22' }}
          script: |
            IMAGE=${{env.IMAGE_NAME}}
            IMAGE=${{ env.REGISTRY }}/${IMAGE,,}:${{ github.ref_name }}
            echo "Docker Image: ${IMAGE}"
            echo ${{ secrets.GHCR_PASSWORD }} | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin
            docker pull ${IMAGE}
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker run -d --name ${{ env.CONTAINER_NAME }} --env-file .env --network=host -p 8080:8080 ${IMAGE}